#include <iostream>
#include <iomanip>
#include <vector>
#include <limits>
using namespace std;

void constructOptimalBST();
void printOptimalBST(int, int);

float a[20], b[20], c[20][20], wt[20][20];
int r[20][20], n;

int main() {
    cout << "\n** Optimal Binary Search Tree **\n";
    
    cout << "Enter number of nodes: ";
    cin >> n;

    // Input the probability of successful search
    cout << "\nEnter the probability for successful search (P[i]):\n";
    for (int i = 0; i < n; i++) {
        cout << "P[" << i << "]: ";
        cin >> a[i];
    }

    // Input the probability of unsuccessful search
    cout << "\nEnter the probability for unsuccessful search (Q[i]):\n";
    for (int i = 0; i <= n; i++) {
        cout << "Q[" << i << "]: ";
        cin >> b[i];
    }

    // Construct the optimal BST
    constructOptimalBST();

    // Print the optimal BST structure
    printOptimalBST(0, n - 1);
    cout << endl;

    return 0;
}

void constructOptimalBST() {
    // Initialize matrices
    for (int i = 0; i < n; i++) {
        c[i][i] = 0.0;
        r[i][i] = 0;
        wt[i][i] = b[i]; // Unsuccessful search weight
    }
    c[n][n] = 0.0;
    r[n][n] = 0;
    wt[n][n] = b[n];

    // Initialize the unsuccessful search weights
    for (int i = 1; i <= n; i++) {
        wt[i][i - 1] = b[i - 1];
    }

    // Calculate the cost of the optimal BST using dynamic programming
    for (int len = 1; len <= n; len++) {
        for (int i = 0; i <= n - len; i++) {
            int j = i + len - 1;
            c[i][j] = numeric_limits<float>::max(); // Start with a large value

            // Try all possible roots for the subtree
            for (int k = i; k <= j; k++) {
                float cost = c[i][k - 1] + c[k + 1][j] + wt[i][j];
                if (cost < c[i][j]) {
                    c[i][j] = cost; // Update the minimum cost
                    r[i][j] = k;    // Store the root
                }
            }
            c[i][j] += wt[i][j]; // Add weight of unsuccessful searches
        }
    }

    // Output the results of the optimal BST
    cout << "\nOptimal BST Information:\n";
    cout << "W[" << n << "] : " << fixed << setprecision(2) << wt[0][n] << endl;
    cout << "C[" << n << "] : " << fixed << setprecision(2) << c[0][n] << endl;
    cout << "R[" << n << "] : " << r[0][n] << endl;
}

void printOptimalBST(int l, int r1) {
    if (l > r1) return;
    
    if (r[l][r1] == 0) return;

    // Print the left and right children of the root
    cout << "\nLeft child of " << r[l][r1] << " : ";
    printOptimalBST(l, r[l][r1] - 1);
    
    cout << "\nRight child of " << r[l][r1] << " : ";
    printOptimalBST(r[l][r1], r1);
}
